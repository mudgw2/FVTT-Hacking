// Starfinder Hacking v6.4 — FULLY DICE SO NICE SAFE
// CRB p.214 | Animation | Flash | Retry | No Errors

// === CORE HELPERS ===
const getHackResult = (roll, dc, key, pass) => {
    const delta = roll - dc;
    const r = { title: "", msg: "", cls: "", lockKey: false, lockPass: false, access: "" };

    if (delta >= 0) {
        if (delta >= 20) { r.title = "ROOT ACCESS!"; r.msg = "Full **Root Access** — control everything."; r.cls = "sfrpg-crit-success"; r.access = "root"; }
        else if (delta >= 5) { r.title = "CONTROL GAINED!"; r.msg = "You gain **Full Access** (complex tasks)."; r.cls = "sfrpg-success"; r.access = "full"; }
        else { r.title = "ACCESS GAINED"; r.msg = "Basic **Access** to unsecured functions."; r.cls = "sfrpg-success"; r.access = "access"; }
    } else {
        if (delta <= -5) {
            r.title = "BREACH DETECTED!";
            r.msg = "System detects breach! **Countermeasures activate**.";
            r.cls = "sfrpg-crit-failure";
            if (key) r.lockKey = true;
            if (pass) r.lockPass = true;
            r.access = "failed";
        } else {
            r.title = "HACK FAILED";
            r.msg = "Roadblocks prevent success. Try again.";
            r.cls = "sfrpg-failure";
            r.access = "failed";
        }
    }

    if (r.lockKey || r.lockPass) {
        r.msg += `<br><br>**CRITICAL FAILURE:** Credentials locked out:<br>`;
        if (r.lockKey) r.msg += `• **Security Key** (+5 lost)<br>`;
        if (r.lockPass) r.msg += `• **Password** (+5 lost)`;
    }
    return r;
};

const calcActions = (tier, inc) => {
    let a = tier;
    for (let i = 0; i < Math.floor(inc / 5); i++) a = Math.max(1, Math.ceil(a / 2));
    return a;
};

// === COLOR FLASH ===
const flashScreen = async (color = "#00ff00", duration = 800) => {
    const flash = document.createElement("div");
    flash.style.cssText = `
        position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
        background: ${color}; opacity: 0; pointer-events: none; z-index: 9999;
        transition: opacity ${duration}ms ease-out;
    `;
    document.body.appendChild(flash);
    requestAnimationFrame(() => flash.style.opacity = "0.6");
    await new Promise(r => setTimeout(r, duration));
    flash.style.opacity = "0";
    await new Promise(r => setTimeout(r, 300));
    flash.remove();
};

// === HACKING ANIMATION ===
const runHackingAnimation = async (actor, tier, creds, timeText, dc, baseDC, speed) => {
    const steps = [
        `> Initializing hack on Tier ${tier} system...`,
        `> Bypassing authentication protocols...`,
        `> Injecting payload...`,
        `> Establishing backdoor...`,
        `> [${"█".repeat(10)}] 100%`
    ];

    const message = await ChatMessage.create({
        speaker: ChatMessage.getSpeaker({ actor }),
        flavor: `HACKING IN PROGRESS...`,
        content: `<div class="sfrpg-hack-animation" style="font-family: 'Courier New', monospace; color: #0f0; background: #000; padding: 10px; border: 1px solid #0f0; border-radius: 5px;">`,
        sound: null
    });

    let fullContent = `<p><strong>Hacker:</strong> ${actor.name}</p>`;
    fullContent += `<p><strong>Credentials:</strong> ${creds}</p>`;
    fullContent += `<p><strong>Time:</strong> ${timeText}</p>`;
    fullContent += `<p><strong>Target DC:</strong> ${dc} (Base ${baseDC}${speed ? ` + ${speed}` : ''})</p><hr style="border-color:#0f0;">`;

    for (let i = 0; i < steps.length; i++) {
        fullContent += `<p style="margin: 3px 0;">${steps[i]}</p>`;
        await message.update({ content: `<div class="sfrpg-hack-animation" style="...">${fullContent}</div>` });
        await new Promise(r => setTimeout(r, 400 + Math.random() * 300));
    }

    return message;
};

// === RETRY FUNCTION (NO DOM BINDING HERE) ===
const retryWithMinus5 = async (actor, tier, bonusDC, speed, key, pass, priorDC, skillMod) => {
    const skillKey = "com";
    if (!actor.system.skills?.[skillKey]?.mod) return ui.notifications.error("Not trained in Computers.");
    
    const skillTerm = `@skills.${skillKey}.mod`;
    const auth = (key ? 5 : 0) + (pass ? 5 : 0);
    const finalDC = priorDC - 5;
    const baseDC = 13 + 4 * tier + bonusDC;
    const timeText = `${calcActions(tier, speed)} Action${calcActions(tier, speed) > 1 ? 's' : ''}${speed ? ` (+${speed} DC)` : ''}`;

    const roll = await new Roll(`1d20 + ${skillTerm} + ${auth}`, actor.getRollData()).evaluate();
    const res = getHackResult(roll.total, finalDC, key, pass);
    const delta = roll.total - finalDC;
    const creds = auth ? `${key?'Key (+5)':''}${key&&pass?', ':''}${pass?'Pass (+5)':''}` : "None";
    const rollHTML = await roll.render();

    const retryButton = res.access === "failed" ? `
        <div style="text-align:center;margin-top:10px;">
            <button class="sfrpg-retry-btn" data-tier="${tier}" data-bonus="${bonusDC}" data-speed="${speed}" data-key="${key}" data-pass="${pass}" data-dc="${finalDC}">
                Retry with -5
            </button>
        </div>` : "";

    const animMsg = await runHackingAnimation(actor, tier, creds, timeText, finalDC, baseDC, speed);
    const isSuccess = delta >= 0;
    await flashScreen(isSuccess ? "#00ff00" : "#ff0000", 800);

    await animMsg.update({
        flavor: `RETRY: Tier ${tier} (-5 DC)`,
        content: `
        <div class="starfinder-hack-result ${res.cls}">
            <h2>RETRY WITH -5</h2>
            <h3 style="color:#ff9900;text-align:center;background:rgba(0,0,0,.1);padding:5px;border-radius:3px">Tier ${tier} (DC ${finalDC})</h3><hr>
            <p><b>Hacker:</b> ${actor.name} (+${skillMod})</p>
            <p><b>Creds:</b> ${creds}</p>
            <p><b>Time:</b> ${timeText}</p>
            <p><b>DC:</b> ${finalDC} (was ${priorDC})</p><hr>
            <p>${res.msg}</p><hr>
            <div style="text-align:center">
                <p><b>Result:</b> <span style="color:${isSuccess?'green':'red'}">${isSuccess?`+${delta}`:`-${-delta}`}</span></p>
                ${rollHTML}
            </div>
            ${retryButton}
        </div>`,
        rolls: [roll],
        sound: CONFIG.sounds.dice
    });

    // BIND VIA HOOK — NO DOM QUERY
    Hooks.once("renderChatMessage", (msg, html) => {
        if (msg.id !== animMsg.id) return;
        html.find('.sfrpg-retry-btn').on('click', e => {
            e.preventDefault();
            const btn = e.currentTarget;
            retryWithMinus5(
                actor,
                +btn.dataset.tier,
                +btn.dataset.bonus,
                +btn.dataset.speed,
                btn.dataset.key === "true",
                btn.dataset.pass === "true",
                +btn.dataset.dc,
                skillMod
            );
        });
    });
};

// === MAIN MACRO ===
if (canvas.tokens.controlled.length !== 1) 
    return ui.notifications.warn("Select exactly one token.");

const { actor } = canvas.tokens.controlled[0];
const skillKey = "com";

if (!actor.system.skills?.[skillKey]?.mod)
    return ui.notifications.error(`${actor.name} is not trained in Computers.`);

const skillMod = actor.system.skills[skillKey].mod;
const skillTerm = `@skills.${skillKey}.mod`;

const tiers = Array.from({ length: 10 }, (_, i) => {
    const t = i + 1;
    const dc = 13 + 4 * t;
    return `<option value="${t}">Tier ${t} (DC ${dc})</option>`;
}).join("");

const dialog = new Dialog({
    title: "Starfinder Hacking v6.4",
    content: `
    <form class="sfrpg-hack">
        <fieldset><legend>System</legend>
            <div class="form-group">
                <label>Access:</label>
                <select name="access">
                    <option value="check">Secured (Hack)</option>
                    <option value="unsecured">Unsecured (Basic)</option>
                    <option value="root">Unsecured Root</option>
                </select>
            </div>
            <div class="form-group"><label>Tier:</label><select name="tier">${tiers}</select></div>
            <div class="form-group"><label>DC Mod:</label><input type="number" name="bonus" value="0"></div>
        </fieldset>
        <fieldset><legend>Hacking</legend>
            <div class="form-group">
                <label>Speed (+5 DC = halve time):</label>
                <input type="number" name="speed" value="0" min="0" step="5">
                <p class="notes">Each +5 halves time (min 1 action)</p>
            </div>
            <div class="form-group"><label>Time:</label><div id="time" style="color:#ff9900;font-weight:bold">1 Full Action</div></div>
            <div class="form-group">
                <label>Credentials (+5 each):</label>
                <div style="display:flex;gap:10px">
                    <label><input type="checkbox" name="key"> Key</label>
                    <label><input type="checkbox" name="pass"> Pass</label>
                </div>
            </div>
        </fieldset>
        <hr>
        <div style="font-size:0.9em;color:#666;">
            <strong>v6.4:</strong> 100% Dice So Nice safe | No DOM errors
        </div>
    </form>`,
    buttons: {
        go: {
            icon: '<i class="fas fa-terminal"></i>',
            label: "Hack",
            callback: async html => {
                try {
                    const f = new FormData(html[0].querySelector("form"));
                    const tier = +f.get("tier") || 1;
                    const access = f.get("access");
                    const bonus = +f.get("bonus") || 0;
                    const speed = Math.max(0, +f.get("speed") || 0);
                    const key = !!f.get("key"), pass = !!f.get("pass");
                    const auth = (key ? 5 : 0) + (pass ? 5 : 0);

                    if (access !== "check") {
                        const title = access === "root" ? "UNSECURED ROOT" : "UNSECURED ACCESS";
                        const msg = access === "root" ? "Full control." : "Basic access.";
                        const creds = "None";
                        const timeText = "Instant";
                        const baseDC = 13 + 4 * tier + bonus;

                        await ChatMessage.create({
                            speaker: ChatMessage.getSpeaker({ actor }),
                            flavor: `Unsecured Access - Tier ${tier}`,
                            content: `<div class="starfinder-hack-result sfrpg-success">...</div>`
                        });
                        return;
                    }

                    const baseDC = 13 + 4 * tier + bonus;
                    const dc = baseDC + speed;
                    const actions = calcActions(tier, speed);
                    const timeText = `${actions} Action${actions > 1 ? 's' : ''}${speed ? ` (+${speed} DC)` : ''}`;
                    const creds = auth ? `${key?'Key (+5)':''}${key&&pass?', ':''}${pass?'Pass (+5)':''}` : "None";

                    const roll = await new Roll(`1d20 + ${skillTerm} + ${auth}`, actor.getRollData()).evaluate();
                    const res = getHackResult(roll.total, dc, key, pass);
                    const delta = roll.total - dc;
                    const rollHTML = await roll.render();

                    const animMsg = await runHackingAnimation(actor, tier, creds, timeText, dc, baseDC, speed);
                    const isSuccess = delta >= 0;
                    await flashScreen(isSuccess ? "#00ff00" : "#ff0000", 800);

                    const retryButton = res.access === "failed" ? `
                        <div style="text-align:center;margin-top:10px;">
                            <button class="sfrpg-retry-btn" data-tier="${tier}" data-bonus="${bonus}" data-speed="${speed}" data-key="${key}" data-pass="${pass}" data-dc="${dc}">
                                Retry with -5
                            </button>
                        </div>` : "";

                    await animMsg.update({
                        flavor: `HACKING COMPLETE — Tier ${tier}`,
                        content: `
                        <div class="starfinder-hack-result ${res.cls}">
                            <h2>${res.title}</h2>
                            <h3 style="color:#ff9900;text-align:center;background:rgba(0,0,0,.1);padding:5px;border-radius:3px">Tier ${tier} Hack</h3><hr>
                            <div style="font-size:.9em">
                                <p><b>Hacker:</b> ${actor.name} (+${skillMod})</p>
                                <p><b>Creds:</b> ${creds}</p>
                                <p><b>Time:</b> ${timeText}</p>
                                <p><b>DC:</b> ${dc} (Base ${baseDC}${speed ? ` + ${speed}` : ''})</p>
                            </div><hr>
                            <p>${res.msg}</p><hr>
                            <div style="text-align:center">
                                <p><b>Result:</b> <span style="color:${isSuccess?'green':'red'}">${isSuccess?`+${delta}`:`-${-delta}`}</span></p>
                                ${rollHTML}
                            </div>
                            ${retryButton}
                        </div>`,
                        rolls: [roll],
                        sound: CONFIG.sounds.dice
                    });

                    // SAFE BINDING VIA HOOK
                    Hooks.once("renderChatMessage", (msg, html) => {
                        if (msg.id !== animMsg.id) return;
                        html.find('.sfrpg-retry-btn').on('click', e => {
                            e.preventDefault();
                            const btn = e.currentTarget;
                            retryWithMinus5(
                                actor,
                                +btn.dataset.tier,
                                +btn.dataset.bonus,
                                +btn.dataset.speed,
                                btn.dataset.key === "true",
                                btn.dataset.pass === "true",
                                +btn.dataset.dc,
                                skillMod
                            );
                        });
                    });

                } catch (e) {
                    console.error("Hacking Macro:", e);
                    ui.notifications.error("Macro failed. See console.");
                }
            }
        }
    },
    render: html => {
        const update = () => {
            const t = +html.find('[name="tier"]').val() || 1;
            const s = Math.max(0, +html.find('[name="speed"]').val() || 0);
            const a = calcActions(t, s);
            html.find("#time").text(`${a} Action${a > 1 ? 's' : ''}`);
        };
        html.find('[name="tier"], [name="speed"]').on("change keyup", update);
        update();
    }
}, { width: 460 }).render(true);
